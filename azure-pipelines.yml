# Azure DevOps Build Pipeline for CCGetter

trigger:
- master
- features/*

jobs:
- job: Build_Windows_Binary

  pool:
    vmImage: 'windows-2019'

  steps:
    - powershell: choco install dotnetcore-sdk --pre
      displayName: Install .NET Core 3.0 preview

    - powershell:  dotnet publish -r win-x64 -c release 
      displayName: Build native Windows executable

    - powershell: cp .\src\CCGetter\bin\Release\netcoreapp3.0\win-x64\native\CCGetter.exe $(Build.ArtifactStagingDirectory)
      displayName: Copy CCGetter.exe to "Artifacts Staging Directory"

    - task: PublishBuildArtifacts@1
      displayName: Publish Windows executable
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: winExe

- job: Build_Linux_Binary
  
  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    dotnetUrl: 'https://download.visualstudio.microsoft.com/download/pr/35c9c95a-535e-4f00-ace0-4e1686e33c6e/b9787e68747a7e8a2cf8cc530f4b2f88/dotnet-sdk-3.0.100-preview3-010431-linux-x64.tar.gz'

  steps:
    - script: 'sudo apt install -y liblttng-ust0 libcurl3 libssl1.0.0 libkrb5-3 zlib1g libicu55 wget clang-3.9 libcurl4-openssl-dev zlib1g-dev libkrb5-dev'
      displayName: Install dependencies

    - script: 'wget $(dotnetUrl)'
      displayName: Download .NET Core 3.0 preview

    - script: 'mkdir -p $HOME/dotnet && tar zxf dotnet-sdk-3.0.100-preview3-010431-linux-x64.tar.gz -C $HOME/dotnet'
      displayName: Unpack .NET Core 3.0 preview

    - script: '$HOME/dotnet/dotnet --info'
      displayName: Show .NET info

    - script: '$HOME/dotnet/dotnet publish -r linux-x64 -c release'
      displayName: Build native Linux executable

    - script: 'cp ./src/CCGetter/bin/Release/netcoreapp3.0/linux-x64/native/CCGetter $(Build.ArtifactStagingDirectory)'
      displayName: Copy CCGetter to "Artifacts Staging Directory"

    - task: PublishBuildArtifacts@1
      displayName: Publish Linux executable
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: linExe

- job: Release_To_Github
  dependsOn:
  - Build_Windows_Binary
  - Build_Linux_Binary

  pool:
    vmImage: 'windows-2019'

  steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download Linux executable
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'linExe'
        downloadPath: '$(System.ArtifactsDirectory)'
    
    - task: DownloadBuildArtifacts@0
      displayName: Download Windows executable
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'winExe'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: GitHubRelease@0
      displayName: Create GitHub Release
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        gitHubConnection: 'CCGetterRelease'
        repositoryName: 'GDATASoftwareAG/CCGetter'
        title: 'CCGetter Release'
        addChangeLog: false
        assets: $(Build.ArtifactStagingDirectory)/*